 # configure hadoop
 - name: create hadoop home folder
   shell: "sudo -u hdfs hadoop fs -mkdir /user/root"
   ignore_errors: yes
   become_user: hdfs
   when: (inventory_hostname in groups['master'])

 - name: configure hadoop home folder
   shell: "sudo -u hdfs hadoop fs -chown root /user/root"
   ignore_errors: yes
   become_user: hdfs
   when: (inventory_hostname in groups['master'])

 # copy and install elyra
 - debug:
    msg: "Downloading Elyra: {{ notebook.elyra_archive_pip_download_location }}{{ notebook.elyra_archive_package_name }}"

 - name: download and install elyra
   local_action: get_url url="{{ notebook.elyra_archive_pip_download_location }}{{ notebook.elyra_archive_package_name }}" dest="/tmp"
   when: (inventory_hostname in groups['master'])
   run_once: true

 - name: copy elyra to node
   copy:
     src: "/tmp/{{ notebook.elyra_archive_package_name }}"
     dest: "{{ install_temp_dir }}/{{ notebook.elyra_archive_package_name }}"
   when: (inventory_hostname in groups['master'])

 - name: pip uninstall elyra
   shell: "{{ pip }} uninstall -y {{ notebook.elyra_archive_package_name }}"
   ignore_errors: yes
   when: (inventory_hostname in groups['master'])

 - name: pip install elyra
   shell: "{{ pip }} install {{ install_temp_dir }}/{{ notebook.elyra_archive_package_name }}"
   when: (inventory_hostname in groups['master'])

 # copy and install notebook - this must follow the elyra (JKG) install until it pulls Notebook 5.1.0

 - debug:
    msg: "Downloading Notebook: {{ notebook.notebook_archive_pip_download_location }}{{ notebook.notebook_archive_package_name }}"

 - name: download and install notebook
   local_action: get_url url="{{ notebook.notebook_archive_pip_download_location }}{{ notebook.notebook_archive_package_name }}" dest="/tmp/"
   when: (inventory_hostname in groups['master']) and (notebook.enable_notebook_5_1 == true)
   run_once: true

 - name: copy notebook to node
   copy:
     src: "/tmp/{{ notebook.notebook_archive_package_name }}"
     dest: "{{ install_temp_dir }}/{{ notebook.notebook_archive_package_name }}"
   when: (inventory_hostname in groups['master']) and (notebook.enable_notebook_5_1 == true)

 - name: pip uninstall notebook
   shell: "{{ pip }} uninstall -y {{ notebook.notebook_archive_package_name }}"
   ignore_errors: yes
   when: (inventory_hostname in groups['master']) and (notebook.enable_notebook_5_1 == true)

 - name: pip install notebook
   shell: "{{ pip }} install {{ install_temp_dir }}/{{ notebook.notebook_archive_package_name }}"
   when: (inventory_hostname in groups['master']) and (notebook.enable_notebook_5_1 == true)

 # Create Elyra user

 - name: remove elyra user
   user:
      name: "{{ notebook.user }}"
      state: absent
      remove: yes

 - name: remove elyra group
   group:
     name: "{{ notebook.user }}"
     state: absent

 - name: create elyra user
   user:
     name: "{{ notebook.user }}"
     groups: "{{ notebook.groups }}"
     append: yes

 - name: create elyra user ssh folder
   file:
    path: "/home/{{ notebook.user }}/.ssh"
    state: directory
    owner: "{{ notebook.user }}"
    group: "{{ notebook.user }}"
    mode: 0700

 - name: remove old SSH keys for elyra user
   local_action: file path="{{item}}" state=absent 
   with_fileglob:
     - /tmp/elyra_id_rsa*
   run_once: true

 - name: generate SSH keys for elyra user
   local_action: shell ssh-keygen -t rsa -b 4096 -f /tmp/elyra_id_rsa -q -N ""
   run_once: true

 - name: copy private ssh key to node
   copy:
     src: "/tmp/elyra_id_rsa"
     dest: "/home/{{ notebook.user }}/.ssh/id_rsa"
     owner: "{{ notebook.user }}"
     group: "{{ notebook.user }}"
     mode: 0600

 - name: copy public ssh key to node
   copy:
     src: "/tmp/elyra_id_rsa.pub"
     dest: "/home/{{ notebook.user }}/.ssh/id_rsa.pub"
     owner: "{{ notebook.user }}"
     group: "{{ notebook.user }}"
     mode: 0644

 - name: add SSH key to authorized users
   authorized_key:
     user: "{{ notebook.user }}"
     state: present
     key: "{{ lookup('file', '/tmp/elyra_id_rsa.pub') }}"

 - name: remove local SSH keys for elyra user
   local_action: file path="{{item}}" state=absent 
   with_fileglob:
     - /tmp/elyra_id_rsa*
   run_once: true

 - name: Remove elyra root installation folder
   file:
     path: "{{ notebook.elyra_log_directory }}"
     state: absent

 - name: create log directory for elyra
   file:
     path: "{{ notebook.elyra_log_directory }}"
     state: directory
     owner: "{{ notebook.user }}"
     group: "{{ notebook.user }}"
     mode: 0755
   become_user: "{{ notebook.user }}"
   ignore_errors: yes
   when: (inventory_hostname in groups['master'])

 - name: create bin directory for elyra
   file:
     path: "{{ notebook.elyra_install_directory }}/bin"
     state: directory
     owner: "{{ notebook.user }}"
     group: "{{ notebook.user }}"
     mode: 0755
   become_user: "{{ notebook.user }}"
   ignore_errors: yes
   when: (inventory_hostname in groups['master'])

 - name: create runtime directory for elyra
   file:
    path: "{{ notebook.elyra_runtime_directory }}"
    state: directory
    owner: "{{ notebook.user }}"
    group: "{{ notebook.user }}"
    mode: 0755
   become_user: "{{ notebook.user }}"
   ignore_errors: yes
   when: (inventory_hostname in groups['master'])

 - name: generate elyra startup script
   template:
    src: start-elyra.sh.j2
    dest: "{{ notebook.elyra_install_directory }}/bin/start-elyra.sh"
    mode: 0744
    owner: "{{ notebook.user }}"
    group: "{{ notebook.user }}"
   when: (inventory_hostname in groups['master'])

 # copy elyra kernel specs

 - name: download elyra kernel specs
   local_action: get_url url="{{ notebook.elyra_kernelspec_download_location }}{{ notebook.elyra_kernelspec_package_name }}" dest="/tmp/"
   run_once: true

 - name: create temporary installation directory
   file:
     path: "{{ install_temp_dir }}"
     state: absent

 - name: create temporary installation directory
   file:
     path: "{{ install_temp_dir }}"
     state: directory
   when: (inventory_hostname in groups['master']) or (notebook.deploy_kernelspecs_to_workers == true) 

 - name: copy kernelspec package to remote node
   copy:
     src: "/tmp/{{ notebook.elyra_kernelspec_package_name }}"
     dest: "{{ install_temp_dir }}/{{ notebook.elyra_kernelspec_package_name }}"
   when: (inventory_hostname in groups['master']) or (notebook.deploy_kernelspecs_to_workers == true) 
